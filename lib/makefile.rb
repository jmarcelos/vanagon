class Makefile
  # The Rule class defines a single Makefile rule.
  #
  # @see http://www.gnu.org/software/make/manual/make.html#Rule-Introduction
  class Rule
    # @!attribute [rw] target
    #   @return [String] The target generated by this rule.
    attr_accessor :target

    # @!attribute [rw] dependencies
    #   @return [Array<String>] A list of dependencies that this rule depends on.
    attr_accessor :dependencies

    # @!attribute [rw] recipe
    #   @return [Array<String>] A list of commands to execute upon invocation of this rule.
    attr_accessor :recipe

    # Create a new Makefile rule. When a block is provided then it is called and passed the
    # newly created Rule object.
    #
    # @overload initialize(target, dependencies: [], recipe: [])
    #   @param target [String] target
    #   @param dependencies [Array<String>]]
    #   @param recipe [Array<String>]
    #
    # @overload initialize(target, dependencies: [], recipe: [], &block)
    #   @param target [String] target
    #   @param dependencies [Array<String>]]
    #   @param recipe [Array<String>]
    #   @yieldparam rule [Makefile::Rule]
    #
    #   @example Providing a block to #initialize
    #     newrule = Makefile::Rule.new("test", dependencies: ["all"]) do |rule|
    #       rule.recipe = [
    #         "make test",
    #         "make cpplint",
    #       ]
    #     end
    def initialize(target, dependencies: [], recipe: [], &block)
      @target = target
      @dependencies = dependencies
      @recipe = recipe
      puts "Joao- Makefile #{recipe}"
      puts "Joao- Makefile #{target}"
      puts "Joao- Makefile #{dependencies}"

      yield(self) if block
    end

    # @return [String, Nil] the name of all dependencies for a given rule,
    #   flattened and joined for a Makefule target
    def flatten_dependencies
      return nil if dependencies.empty?
      dependencies.flatten.join("\s")
    end

    # @return [String] the base Rule for a Makefile target, including
    #   all dependencies.
    def base_target
      ["#{target}:", dependencies].flatten.compact.join("\s")
    end

    def compounded_recipe
      Array(recipe)
        .compact
        .map { |line| "\t" + line.gsub("\n", "\n\t") + "\n" }
        .join
    end

    # Format this rule as a Makefile rule.
    #
    # Recipes that have multiline statements will have tabs inserted after each
    # newline to ensure that the recipe is parsed as part of a single makefile rule.
    #
    # @return [String]
    def format
      result = [base_target, compounded_recipe].flatten.join("\n")
      puts "Format rule Makefile #{result}"
      result
    end
    alias to_s format
  end
end
